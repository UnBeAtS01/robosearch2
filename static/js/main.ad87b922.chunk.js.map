{"version":3,"sources":["serviceWorker.js","Card.js","Cardlist.js","SearchBox.js","scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","CardList","robots","cardarray","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onsearchchange","event","setState","searchfield","target","value","state","fetch","then","Response","json","filterrobots","this","filter","s","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCCSC,EAhBF,SAACC,GAAQ,IAEXC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAYF,EAANG,GACtB,OACI,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BN,EAAMG,GAAhC,eACpB,6BACI,4BAAKF,GACL,2BAAIC,MCMEK,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,WAEhF,OACE,6BACGO,ICOQK,EAdG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,cACZC,SAAUH,MCIXI,EAXA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CACRC,UAAW,SAAUC,OAAQ,iBAAkBC,OAAQ,UAErDvB,EAAMwB,WCiDLC,G,wDAtCX,aAAe,IAAD,8BACV,gBAgBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAhB1C,EAAKC,MAAQ,CACTxB,OAAQ,GACRqB,YAAa,IAJP,E,gEAOO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAvB,GACF,EAAKiB,SAAS,CAAEpB,OAAQG,S,+BAS1B,IAAD,OACC0B,EAAeC,KAAKN,MAAMxB,OAAO+B,QAAO,SAAAC,GAC1C,OAAOA,EAAEvC,KAAKwC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAEhE,OACI,yBAAKrC,UAAU,MACX,0CACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQ6B,U,GAhCpBM,cCXlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SNyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ad87b922.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//smallest component of robofriend\nimport React from 'react';\n\nconst Card = (props)=>{\n    //or we directly (props)=({name,id,email}) do this ES6 called destructuring\n    const {name,email,id} = props;//from ES6 //props.id=id so i not use to understand later if get confuse\nreturn(\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 Shadow-5'>\n     <img alt=\"robot\" src={`https://robohash.org/${props.id}u?200x200`}/> \n     <div > \n         <h2>{name}</h2>\n         <p>{email}</p>\n     </div>\n\n\n    </div>\n);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  const cardarray = robots.map((user, i) => {\n    return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n  });\n  return (\n    <div>\n      {cardarray}\n\n    </div>\n\n  );\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchchange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type=\"search\"\n                placeholder=\"search robo\"\n                onChange={searchchange}\n            />\n\n        </div>\n\n    )\n};\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{\n            overflowY: 'scroll', border: '1px dash black', height: '650px'\n        }}>\n            { props.children}\n        </div >\n    );\n\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport CardList from './Cardlist';\n//import { robots } from './robo';\nimport SearchBox from './SearchBox';\nimport Scroll from './scroll.js';\nimport './App.css';\n/*const App = () => {\n    return (\n        <div className=\"tc\">\n            <h1>RoboSearch</h1>\n            <SearchBox />\n            <CardList robots={robots} />\n        </div>\n\n\n    )\n}*/\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(Response => {\n                return Response.json();\n            })\n            .then(user => {\n                this.setState({ robots: user });\n            })\n\n    }\n    onsearchchange = (event) => {\n        this.setState({ searchfield: event.target.value });//setting value to searchfield\n\n        //console.log(filterrobots);\n    }\n    render() {\n        const filterrobots = this.state.robots.filter(s => {\n            return s.name.toLowerCase().includes(this.state.searchfield.toLowerCase());///filtering on basis of searchfield for props of child:)\n        })\n        return (\n            <div className=\"tc\">\n                <h1>RoboSearch</h1>\n                <SearchBox searchchange={this.onsearchchange} />\n                <Scroll>\n                    <CardList robots={filterrobots} />\n                </Scroll>\n\n            </div>\n        );\n    }\n};\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}